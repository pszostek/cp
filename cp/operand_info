XED_DLL_EXPORT xed_reg_enum_t xed_decoded_inst_get_seg_reg(const xed_decoded_inst_t* p, unsigned int mem_idx);
/// @ingroup DEC
XED_DLL_EXPORT xed_reg_enum_t xed_decoded_inst_get_base_reg(const xed_decoded_inst_t* p, unsigned int mem_idx);
XED_DLL_EXPORT xed_reg_enum_t xed_decoded_inst_get_index_reg(const xed_decoded_inst_t* p, unsigned int mem_idx);
/// @ingroup DEC
XED_DLL_EXPORT xed_uint_t xed_decoded_inst_get_scale(const xed_decoded_inst_t* p, unsigned int mem_idx);
/// @ingroup DEC
XED_DLL_EXPORT xed_int64_t xed_decoded_inst_get_memory_displacement(const xed_decoded_inst_t* p, unsigned int mem_idx);
/// @ingroup DEC
/// Result in BYTES
XED_DLL_EXPORT xed_uint_t  xed_decoded_inst_get_memory_displacement_width(const xed_decoded_inst_t* p, unsigned int mem_idx);
/// @ingroup DEC
/// Result in BITS
XED_DLL_EXPORT xed_uint_t  xed_decoded_inst_get_memory_displacement_width_bits(const xed_decoded_inst_t* p, unsigned int mem_idx);
/// @ingroup DEC
XED_DLL_EXPORT xed_int32_t xed_decoded_inst_get_branch_displacement(const xed_decoded_inst_t* p);
/// @ingroup DEC
/// Result in BYTES
XED_DLL_EXPORT xed_uint_t  xed_decoded_inst_get_branch_displacement_width(const xed_decoded_inst_t* p);
/// @ingroup DEC
/// Result in BITS
XED_DLL_EXPORT xed_uint_t  xed_decoded_inst_get_branch_displacement_width_bits(const xed_decoded_inst_t* p);
/// @ingroup DEC
XED_DLL_EXPORT xed_uint64_t xed_decoded_inst_get_unsigned_immediate(const xed_decoded_inst_t* p); 
/// @ingroup DEC
/// Return true if the first immediate (IMM0)  is signed
XED_DLL_EXPORT xed_uint_t xed_decoded_inst_get_immediate_is_signed(const xed_decoded_inst_t* p);
/// @ingroup DEC
/// Return the immediate width in BYTES.
XED_DLL_EXPORT xed_uint_t xed_decoded_inst_get_immediate_width(const xed_decoded_inst_t* p);
/// @ingroup DEC
/// Return the immediate width in BITS.
XED_DLL_EXPORT xed_uint_t xed_decoded_inst_get_immediate_width_bits(const xed_decoded_inst_t* p);
/// @ingroup DEC
XED_DLL_EXPORT xed_int32_t xed_decoded_inst_get_signed_immediate(const xed_decoded_inst_t* p);

xed_uint32_t xed_decoded_inst_get_attribute(const xed_decoded_inst_t* p, xed_attribute_enum_t attr);
typedef enum {
  XED_ATTRIBUTE_INVALID,
  XED_ATTRIBUTE_ANY_REP_ABLE,
  XED_ATTRIBUTE_ATT_OPERAND_ORDER_EXCEPTION,
  XED_ATTRIBUTE_AVX_REQUIRES_ALIGNMENT,
  XED_ATTRIBUTE_BYTEOP,
  XED_ATTRIBUTE_DOUBLE_WIDE_OUTPUT,
  XED_ATTRIBUTE_DWORD_INDICES,
  XED_ATTRIBUTE_ELEMENT_SIZE_D,
  XED_ATTRIBUTE_ELEMENT_SIZE_Q,
  XED_ATTRIBUTE_EXCEPTION_BR,
  XED_ATTRIBUTE_FAR_XFER,
  XED_ATTRIBUTE_FIXED_BASE0,
  XED_ATTRIBUTE_FIXED_BASE1,
  XED_ATTRIBUTE_GATHER,
  XED_ATTRIBUTE_HALF_WIDE_OUTPUT,
  XED_ATTRIBUTE_IGNORES_OSFXSR,
  XED_ATTRIBUTE_IMPLICIT_ONE,
  XED_ATTRIBUTE_LOCKABLE,
  XED_ATTRIBUTE_MASKOP,
  XED_ATTRIBUTE_MMX_EXCEPT,
  XED_ATTRIBUTE_MXCSR,
  XED_ATTRIBUTE_MXCSR_RD,
  XED_ATTRIBUTE_NOP,
  XED_ATTRIBUTE_NOTSX,
  XED_ATTRIBUTE_NOTSX_COND,
  XED_ATTRIBUTE_PREFETCH,
  XED_ATTRIBUTE_PROTECTED_MODE,
  XED_ATTRIBUTE_QWORD_INDICES,
  XED_ATTRIBUTE_REQUIRES_ALIGNMENT,
  XED_ATTRIBUTE_RING0,
  XED_ATTRIBUTE_SCALABLE,
  XED_ATTRIBUTE_SIMD_PACKED_ALIGNMENT,
  XED_ATTRIBUTE_SIMD_SCALAR,
  XED_ATTRIBUTE_SKIPLOW32,
  XED_ATTRIBUTE_SKIPLOW64,
  XED_ATTRIBUTE_SPECIAL_AGEN_REQUIRED,
  XED_ATTRIBUTE_STACKPOP0,
  XED_ATTRIBUTE_STACKPOP1,
  XED_ATTRIBUTE_STACKPUSH0,
  XED_ATTRIBUTE_STACKPUSH1,
  XED_ATTRIBUTE_UNALIGNED,
  XED_ATTRIBUTE_X87_CONTROL,
  XED_ATTRIBUTE_X87_MMX_STATE_CW,
  XED_ATTRIBUTE_X87_MMX_STATE_R,
  XED_ATTRIBUTE_X87_MMX_STATE_W,
  XED_ATTRIBUTE_X87_NOWAIT,
  XED_ATTRIBUTE_XMM_STATE_CW,
  XED_ATTRIBUTE_XMM_STATE_R,
  XED_ATTRIBUTE_XMM_STATE_W,
  XED_ATTRIBUTE_LAST
} xed_attribute_enum_t;

///////////////////////////////////////////////////////////////////////////////////////
/// Return the number of element in the operand (for SSE and AVX operands)
/// @ingroup DEC
XED_DLL_EXPORT unsigned int  xed_decoded_inst_operand_elements(const xed_decoded_inst_t* p, 
                                                               unsigned int operand_index);
/// @ingroup DEC
/// Returns true if the instruction is a prefetch
XED_DLL_EXPORT xed_bool_t xed_decoded_inst_is_prefetch(const xed_decoded_inst_t* p);
//@}

xed_operand_type(const xed_operand_t* p);
typedef enum {
  XED_OPERAND_TYPE_INVALID,
  XED_OPERAND_TYPE_ERROR,
  XED_OPERAND_TYPE_IMM,
  XED_OPERAND_TYPE_IMM_CONST,
  XED_OPERAND_TYPE_NT_LOOKUP_FN,
  XED_OPERAND_TYPE_REG,
  XED_OPERAND_TYPE_LAST
} xed_operand_type_enum_t;

/// @ingroup DEC
xed_operand_visibility_enum_t xed_operand_operand_visibility( const xed_operand_t* p);
typedef enum {
  XED_OPVIS_INVALID,
  XED_OPVIS_EXPLICIT, ///< Shows up in operand encoding
  XED_OPVIS_IMPLICIT, ///< Part of the opcode, but listed as an operand
  XED_OPVIS_SUPPRESSED, ///< Part of the opcode, but not typically listed as an operand
  XED_OPVIS_LAST
} xed_operand_visibility_enum_t;

xed_operand_width_enum_t xed_operand_width(const xed_operand_t* p)
typedef enum {
  XED_OPERAND_WIDTH_INVALID,
  XED_OPERAND_WIDTH_ASZ,
  XED_OPERAND_WIDTH_SSZ,
  XED_OPERAND_WIDTH_PSEUDO,
  XED_OPERAND_WIDTH_PSEUDOX87,
  XED_OPERAND_WIDTH_A16,
  XED_OPERAND_WIDTH_A32,
  XED_OPERAND_WIDTH_B,
  XED_OPERAND_WIDTH_D,
  XED_OPERAND_WIDTH_DQ,
  XED_OPERAND_WIDTH_XUB,
  XED_OPERAND_WIDTH_XUW,
  XED_OPERAND_WIDTH_XUD,
  XED_OPERAND_WIDTH_XUQ,
  XED_OPERAND_WIDTH_X128,
  XED_OPERAND_WIDTH_XB,
  XED_OPERAND_WIDTH_XW,
  XED_OPERAND_WIDTH_XD,
  XED_OPERAND_WIDTH_XQ,
  XED_OPERAND_WIDTH_MB,
  XED_OPERAND_WIDTH_MW,
  XED_OPERAND_WIDTH_MD,
  XED_OPERAND_WIDTH_MQ,
  XED_OPERAND_WIDTH_M64INT,
  XED_OPERAND_WIDTH_M64REAL,
  XED_OPERAND_WIDTH_MEM108,
  XED_OPERAND_WIDTH_MEM14,
  XED_OPERAND_WIDTH_MEM16,
  XED_OPERAND_WIDTH_MEM16INT,
  XED_OPERAND_WIDTH_MEM28,
  XED_OPERAND_WIDTH_MEM32INT,
  XED_OPERAND_WIDTH_MEM32REAL,
  XED_OPERAND_WIDTH_MEM80DEC,
  XED_OPERAND_WIDTH_MEM80REAL,
  XED_OPERAND_WIDTH_F80,
  XED_OPERAND_WIDTH_MEM94,
  XED_OPERAND_WIDTH_MFPXENV,
  XED_OPERAND_WIDTH_MXSAVE,
  XED_OPERAND_WIDTH_MPREFETCH,
  XED_OPERAND_WIDTH_P,
  XED_OPERAND_WIDTH_P2,
  XED_OPERAND_WIDTH_PD,
  XED_OPERAND_WIDTH_PS,
  XED_OPERAND_WIDTH_PI,
  XED_OPERAND_WIDTH_Q,
  XED_OPERAND_WIDTH_S,
  XED_OPERAND_WIDTH_S64,
  XED_OPERAND_WIDTH_SD,
  XED_OPERAND_WIDTH_SI,
  XED_OPERAND_WIDTH_SS,
  XED_OPERAND_WIDTH_V,
  XED_OPERAND_WIDTH_Y,
  XED_OPERAND_WIDTH_W,
  XED_OPERAND_WIDTH_Z,
  XED_OPERAND_WIDTH_SPW8,
  XED_OPERAND_WIDTH_SPW,
  XED_OPERAND_WIDTH_SPW3,
  XED_OPERAND_WIDTH_SPW2,
  XED_OPERAND_WIDTH_I1,
  XED_OPERAND_WIDTH_I2,
  XED_OPERAND_WIDTH_I3,
  XED_OPERAND_WIDTH_I4,
  XED_OPERAND_WIDTH_I5,
  XED_OPERAND_WIDTH_I6,
  XED_OPERAND_WIDTH_I7,
  XED_OPERAND_WIDTH_I8,
  XED_OPERAND_WIDTH_VAR,
  XED_OPERAND_WIDTH_QQ,
  XED_OPERAND_WIDTH_YUB,
  XED_OPERAND_WIDTH_YUW,
  XED_OPERAND_WIDTH_YUD,
  XED_OPERAND_WIDTH_YUQ,
  XED_OPERAND_WIDTH_Y128,
  XED_OPERAND_WIDTH_YB,
  XED_OPERAND_WIDTH_YW,
  XED_OPERAND_WIDTH_YD,
  XED_OPERAND_WIDTH_YQ,
  XED_OPERAND_WIDTH_YPS,
  XED_OPERAND_WIDTH_YPD,
  XED_OPERAND_WIDTH_LAST
} xed_operand_width_enum_t;

xed_operand_enum_t xed_operand_name(const xed_operand_t* p)
typedef enum {
  XED_OPERAND_INVALID,
  XED_OPERAND_AGEN,
  XED_OPERAND_AMD3DNOW,
  XED_OPERAND_ASZ,
  XED_OPERAND_BASE0,
  XED_OPERAND_BASE1,
  XED_OPERAND_BCAST,
  XED_OPERAND_BRDISP_WIDTH,
  XED_OPERAND_BRDISP0,
  XED_OPERAND_BRDISP1,
  XED_OPERAND_CHIP,
  XED_OPERAND_DEFAULT_SEG,
  XED_OPERAND_DF32,
  XED_OPERAND_DF64,
  XED_OPERAND_DISP_WIDTH,
  XED_OPERAND_DISP_BYTES,
  XED_OPERAND_DISP0,
  XED_OPERAND_DISP1,
  XED_OPERAND_DISP2,
  XED_OPERAND_DISP3,
  XED_OPERAND_EASZ,
  XED_OPERAND_ELEMENT_SIZE,
  XED_OPERAND_ENCODER_PREFERRED,
  XED_OPERAND_EOSZ,
  XED_OPERAND_ERROR,
  XED_OPERAND_ESCVL_OP,
  XED_OPERAND_ESRC,
  XED_OPERAND_FIRST_F2F3,
  XED_OPERAND_HAS_MODRM,
  XED_OPERAND_HAS_SIB,
  XED_OPERAND_HINT,
  XED_OPERAND_ICLASS,
  XED_OPERAND_ILD_F2,
  XED_OPERAND_ILD_F3,
  XED_OPERAND_ILD_SEG,
  XED_OPERAND_IMM_WIDTH,
  XED_OPERAND_IMM_BYTES,
  XED_OPERAND_IMM0SIGNED,
  XED_OPERAND_IMM0,
  XED_OPERAND_IMM1_BYTES,
  XED_OPERAND_IMM1,
  XED_OPERAND_INDEX,
  XED_OPERAND_LAST_F2F3,
  XED_OPERAND_LBIT,
  XED_OPERAND_LOCK,
  XED_OPERAND_LOCKABLE,
  XED_OPERAND_MAP,
  XED_OPERAND_MAX_BYTES,
  XED_OPERAND_MBITS,
  XED_OPERAND_MEM_WIDTH,
  XED_OPERAND_MEM0,
  XED_OPERAND_MEM1,
  XED_OPERAND_MOD,
  XED_OPERAND_MODE_FIRST_PREFIX,
  XED_OPERAND_MODE,
  XED_OPERAND_MODEP5,
  XED_OPERAND_MODEP55C,
  XED_OPERAND_MODRM,
  XED_OPERAND_MODRM_BYTE,
  XED_OPERAND_NEED_MEMDISP,
  XED_OPERAND_NEEDREX,
  XED_OPERAND_NELEM,
  XED_OPERAND_NOMINAL_OPCODE,
  XED_OPERAND_NOREX,
  XED_OPERAND_NPREFIXES,
  XED_OPERAND_NREXES,
  XED_OPERAND_NSEG_PREFIXES,
  XED_OPERAND_OSZ,
  XED_OPERAND_OUT_OF_BYTES,
  XED_OPERAND_OUTREG,
  XED_OPERAND_P4,
  XED_OPERAND_POS_SIB,
  XED_OPERAND_POS_DISP,
  XED_OPERAND_POS_IMM,
  XED_OPERAND_POS_IMM1,
  XED_OPERAND_POS_MODRM,
  XED_OPERAND_POS_NOMINAL_OPCODE,
  XED_OPERAND_PREFIX66,
  XED_OPERAND_PTR,
  XED_OPERAND_REALMODE,
  XED_OPERAND_REFINING,
  XED_OPERAND_REG,
  XED_OPERAND_REG0,
  XED_OPERAND_REG1,
  XED_OPERAND_REG2,
  XED_OPERAND_REG3,
  XED_OPERAND_REG4,
  XED_OPERAND_REG5,
  XED_OPERAND_REG6,
  XED_OPERAND_REG7,
  XED_OPERAND_REG8,
  XED_OPERAND_REG9,
  XED_OPERAND_REG10,
  XED_OPERAND_REG11,
  XED_OPERAND_REG12,
  XED_OPERAND_REG13,
  XED_OPERAND_REG14,
  XED_OPERAND_REG15,
  XED_OPERAND_RELBR,
  XED_OPERAND_REP,
  XED_OPERAND_REP_ABLE,
  XED_OPERAND_REX,
  XED_OPERAND_REXB,
  XED_OPERAND_REXBP,
  XED_OPERAND_REXR,
  XED_OPERAND_REXRP,
  XED_OPERAND_REXW,
  XED_OPERAND_REXX,
  XED_OPERAND_REXXP,
  XED_OPERAND_RM,
  XED_OPERAND_SCALE,
  XED_OPERAND_SEG_OVD,
  XED_OPERAND_SEG0,
  XED_OPERAND_SEG1,
  XED_OPERAND_SIB,
  XED_OPERAND_SIBBASE,
  XED_OPERAND_SIBINDEX,
  XED_OPERAND_SIBSCALE,
  XED_OPERAND_SMODE,
  XED_OPERAND_SREG,
  XED_OPERAND_SRM,
  XED_OPERAND_TYPE,
  XED_OPERAND_UIMM00,
  XED_OPERAND_UIMM1,
  XED_OPERAND_UIMM01,
  XED_OPERAND_UIMM02,
  XED_OPERAND_UIMM03,
  XED_OPERAND_USING_DEFAULT_SEGMENT0,
  XED_OPERAND_USING_DEFAULT_SEGMENT1,
  XED_OPERAND_VB2_OP,
  XED_OPERAND_VEX_C4,
  XED_OPERAND_VEX_PREFIX,
  XED_OPERAND_VEXB_OP,
  XED_OPERAND_VEXDEST3,
  XED_OPERAND_VEXDEST210,
  XED_OPERAND_VEXL,
  XED_OPERAND_VEXL_OP,
  XED_OPERAND_VEXMAP_OP,
  XED_OPERAND_VEXMM34_OP,
  XED_OPERAND_VEXPFX_OP,
  XED_OPERAND_VEXPP_OP,
  XED_OPERAND_VEXPP,
  XED_OPERAND_VEXR_OP,
  XED_OPERAND_VEXVALID,
  XED_OPERAND_VEXX_OP,
  XED_OPERAND_VL,
  XED_OPERAND_VMAP,
  XED_OPERAND_XMAP,
  XED_OPERAND_XMAP43,
  XED_OPERAND_XSRC,
  XED_OPERAND_LAST
} xed_operand_enum_t;

xed_reg_enum_t xed_decoded_inst_get_reg(const xed_decoded_inst_t* p, xed_operand_enum_t reg_operand) {
typedef enum {
  XED_REG_INVALID,
  XED_REG_CR0,
  XED_REG_CR1,
  XED_REG_CR2,
  XED_REG_CR3,
  XED_REG_CR4,
  XED_REG_CR5,
  XED_REG_CR6,
  XED_REG_CR7,
  XED_REG_CR8,
  XED_REG_CR9,
  XED_REG_CR10,
  XED_REG_CR11,
  XED_REG_CR12,
  XED_REG_CR13,
  XED_REG_CR14,
  XED_REG_CR15,
  XED_REG_DR0,
  XED_REG_DR1,
  XED_REG_DR2,
  XED_REG_DR3,
  XED_REG_DR4,
  XED_REG_DR5,
  XED_REG_DR6,
  XED_REG_DR7,
  XED_REG_DR8,
  XED_REG_DR9,
  XED_REG_DR10,
  XED_REG_DR11,
  XED_REG_DR12,
  XED_REG_DR13,
  XED_REG_DR14,
  XED_REG_DR15,
  XED_REG_FLAGS,
  XED_REG_EFLAGS,
  XED_REG_RFLAGS,
  XED_REG_AX,
  XED_REG_CX,
  XED_REG_DX,
  XED_REG_BX,
  XED_REG_SP,
  XED_REG_BP,
  XED_REG_SI,
  XED_REG_DI,
  XED_REG_R8W,
  XED_REG_R9W,
  XED_REG_R10W,
  XED_REG_R11W,
  XED_REG_R12W,
  XED_REG_R13W,
  XED_REG_R14W,
  XED_REG_R15W,
  XED_REG_EAX,
  XED_REG_ECX,
  XED_REG_EDX,
  XED_REG_EBX,
  XED_REG_ESP,
  XED_REG_EBP,
  XED_REG_ESI,
  XED_REG_EDI,
  XED_REG_R8D,
  XED_REG_R9D,
  XED_REG_R10D,
  XED_REG_R11D,
  XED_REG_R12D,
  XED_REG_R13D,
  XED_REG_R14D,
  XED_REG_R15D,
  XED_REG_RAX,
  XED_REG_RCX,
  XED_REG_RDX,
  XED_REG_RBX,
  XED_REG_RSP,
  XED_REG_RBP,
  XED_REG_RSI,
  XED_REG_RDI,
  XED_REG_R8,
  XED_REG_R9,
  XED_REG_R10,
  XED_REG_R11,
  XED_REG_R12,
  XED_REG_R13,
  XED_REG_R14,
  XED_REG_R15,
  XED_REG_AL,
  XED_REG_CL,
  XED_REG_DL,
  XED_REG_BL,
  XED_REG_SPL,
  XED_REG_BPL,
  XED_REG_SIL,
  XED_REG_DIL,
  XED_REG_R8B,
  XED_REG_R9B,
  XED_REG_R10B,
  XED_REG_R11B,
  XED_REG_R12B,
  XED_REG_R13B,
  XED_REG_R14B,
  XED_REG_R15B,
  XED_REG_AH,
  XED_REG_CH,
  XED_REG_DH,
  XED_REG_BH,
  XED_REG_ERROR,
  XED_REG_RIP,
  XED_REG_EIP,
  XED_REG_IP,
  XED_REG_MMX0,
  XED_REG_MMX1,
  XED_REG_MMX2,
  XED_REG_MMX3,
  XED_REG_MMX4,
  XED_REG_MMX5,
  XED_REG_MMX6,
  XED_REG_MMX7,
  XED_REG_MXCSR,
  XED_REG_STACKPUSH,
  XED_REG_STACKPOP,
  XED_REG_GDTR,
  XED_REG_LDTR,
  XED_REG_IDTR,
  XED_REG_TR,
  XED_REG_TSC,
  XED_REG_TSCAUX,
  XED_REG_MSRS,
  XED_REG_FSBASE,
  XED_REG_GSBASE,
  XED_REG_X87CONTROL,
  XED_REG_X87STATUS,
  XED_REG_X87TAG,
  XED_REG_X87PUSH,
  XED_REG_X87POP,
  XED_REG_X87POP2,
  XED_REG_X87OPCODE,
  XED_REG_X87LASTCS,
  XED_REG_X87LASTIP,
  XED_REG_X87LASTDS,
  XED_REG_X87LASTDP,
  XED_REG_CS,
  XED_REG_DS,
  XED_REG_ES,
  XED_REG_SS,
  XED_REG_FS,
  XED_REG_GS,
  XED_REG_TMP0,
  XED_REG_TMP1,
  XED_REG_TMP2,
  XED_REG_TMP3,
  XED_REG_TMP4,
  XED_REG_TMP5,
  XED_REG_TMP6,
  XED_REG_TMP7,
  XED_REG_TMP8,
  XED_REG_TMP9,
  XED_REG_TMP10,
  XED_REG_TMP11,
  XED_REG_TMP12,
  XED_REG_TMP13,
  XED_REG_TMP14,
  XED_REG_TMP15,
  XED_REG_ST0,
  XED_REG_ST1,
  XED_REG_ST2,
  XED_REG_ST3,
  XED_REG_ST4,
  XED_REG_ST5,
  XED_REG_ST6,
  XED_REG_ST7,
  XED_REG_XCR0,
  XED_REG_XMM0,
  XED_REG_XMM1,
  XED_REG_XMM2,
  XED_REG_XMM3,
  XED_REG_XMM4,
  XED_REG_XMM5,
  XED_REG_XMM6,
  XED_REG_XMM7,
  XED_REG_XMM8,
  XED_REG_XMM9,
  XED_REG_XMM10,
  XED_REG_XMM11,
  XED_REG_XMM12,
  XED_REG_XMM13,
  XED_REG_XMM14,
  XED_REG_XMM15,
  XED_REG_YMM0,
  XED_REG_YMM1,
  XED_REG_YMM2,
  XED_REG_YMM3,
  XED_REG_YMM4,
  XED_REG_YMM5,
  XED_REG_YMM6,
  XED_REG_YMM7,
  XED_REG_YMM8,
  XED_REG_YMM9,
  XED_REG_YMM10,
  XED_REG_YMM11,
  XED_REG_YMM12,
  XED_REG_YMM13,
  XED_REG_YMM14,
  XED_REG_YMM15,
  XED_REG_LAST,
  XED_REG_CR_FIRST=XED_REG_CR0, //< PSEUDO
  XED_REG_CR_LAST=XED_REG_CR15, //<PSEUDO
  XED_REG_DR_FIRST=XED_REG_DR0, //< PSEUDO
  XED_REG_DR_LAST=XED_REG_DR15, //<PSEUDO
  XED_REG_FLAGS_FIRST=XED_REG_FLAGS, //< PSEUDO
  XED_REG_FLAGS_LAST=XED_REG_RFLAGS, //<PSEUDO
  XED_REG_GPR16_FIRST=XED_REG_AX, //< PSEUDO
  XED_REG_GPR16_LAST=XED_REG_R15W, //<PSEUDO
  XED_REG_GPR32_FIRST=XED_REG_EAX, //< PSEUDO
  XED_REG_GPR32_LAST=XED_REG_R15D, //<PSEUDO
  XED_REG_GPR64_FIRST=XED_REG_RAX, //< PSEUDO
  XED_REG_GPR64_LAST=XED_REG_R15, //<PSEUDO
  XED_REG_GPR8_FIRST=XED_REG_AL, //< PSEUDO
  XED_REG_GPR8_LAST=XED_REG_R15B, //<PSEUDO
  XED_REG_GPR8H_FIRST=XED_REG_AH, //< PSEUDO
  XED_REG_GPR8H_LAST=XED_REG_BH, //<PSEUDO
  XED_REG_INVALID_FIRST=XED_REG_INVALID, //< PSEUDO
  XED_REG_INVALID_LAST=XED_REG_ERROR, //<PSEUDO
  XED_REG_IP_FIRST=XED_REG_RIP, //< PSEUDO
  XED_REG_IP_LAST=XED_REG_IP, //<PSEUDO
  XED_REG_MMX_FIRST=XED_REG_MMX0, //< PSEUDO
  XED_REG_MMX_LAST=XED_REG_MMX7, //<PSEUDO
  XED_REG_MXCSR_FIRST=XED_REG_MXCSR, //< PSEUDO
  XED_REG_MXCSR_LAST=XED_REG_MXCSR, //<PSEUDO
  XED_REG_PSEUDO_FIRST=XED_REG_STACKPUSH, //< PSEUDO
  XED_REG_PSEUDO_LAST=XED_REG_GSBASE, //<PSEUDO
  XED_REG_PSEUDOX87_FIRST=XED_REG_X87CONTROL, //< PSEUDO
  XED_REG_PSEUDOX87_LAST=XED_REG_X87LASTDP, //<PSEUDO
  XED_REG_SR_FIRST=XED_REG_CS, //< PSEUDO
  XED_REG_SR_LAST=XED_REG_GS, //<PSEUDO
  XED_REG_TMP_FIRST=XED_REG_TMP0, //< PSEUDO
  XED_REG_TMP_LAST=XED_REG_TMP15, //<PSEUDO
  XED_REG_X87_FIRST=XED_REG_ST0, //< PSEUDO
  XED_REG_X87_LAST=XED_REG_ST7, //<PSEUDO
  XED_REG_XCR_FIRST=XED_REG_XCR0, //< PSEUDO
  XED_REG_XCR_LAST=XED_REG_XCR0, //<PSEUDO
  XED_REG_XMM_FIRST=XED_REG_XMM0, //< PSEUDO
  XED_REG_XMM_LAST=XED_REG_XMM15, //<PSEUDO
  XED_REG_YMM_FIRST=XED_REG_YMM0, //< PSEUDO
  XED_REG_YMM_LAST=XED_REG_YMM15 //<PSEUDO
} xed_reg_enum_t;

xed_operand_action_enum_t xed_operand_rw(const xed_operand_t* p)
typedef enum {
  XED_OPERAND_ACTION_INVALID,
  XED_OPERAND_ACTION_RW, ///< Read and written (must write)
  XED_OPERAND_ACTION_R, ///< Read-only
  XED_OPERAND_ACTION_W, ///< Write-only (must write)
  XED_OPERAND_ACTION_RCW, ///< Read and conditionlly written (may write)
  XED_OPERAND_ACTION_CW, ///< Conditionlly written (may write)
  XED_OPERAND_ACTION_CRW, ///< Conditionlly read, always written (must write)
  XED_OPERAND_ACTION_CR, ///< Conditional read
  XED_OPERAND_ACTION_LAST
} xed_operand_action_enum_t;

xed_operand_element_type_enum_t  xed_decoded_inst_operand_element_type(const xed_decoded_inst_t* p, 
                                                                       unsigned int operand_index);
typedef enum {
  XED_OPERAND_ELEMENT_TYPE_INVALID,
  XED_OPERAND_ELEMENT_TYPE_UINT, ///< Unsigned integer
  XED_OPERAND_ELEMENT_TYPE_INT, ///< Signed integer
  XED_OPERAND_ELEMENT_TYPE_SINGLE, ///< 32b FP single precision
  XED_OPERAND_ELEMENT_TYPE_DOUBLE, ///< 64b FP double precision
  XED_OPERAND_ELEMENT_TYPE_LONGDOUBLE, ///< 80b FP x87
  XED_OPERAND_ELEMENT_TYPE_LONGBCD, ///< 80b decimal BCD
  XED_OPERAND_ELEMENT_TYPE_STRUCT, ///< a structure of various fields
  XED_OPERAND_ELEMENT_TYPE_VARIABLE, ///< depends on other fields in the instruction
  XED_OPERAND_ELEMENT_TYPE_FLOAT16, ///< 16b floating point
  XED_OPERAND_ELEMENT_TYPE_LAST
} xed_operand_element_type_enum_t;

